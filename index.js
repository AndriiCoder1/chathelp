require('dotenv').config();
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const { OpenAI } = require('openai');
const path = require('path');
const fs = require('fs');
const multer = require('multer');
const { exec } = require('child_process');
const cors = require('cors');
const gTTS = require('gtts');

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π
console.log("[–°–µ—Ä–≤–µ—Ä] OpenAI API Key:", process.env.OPENAI_API_KEY ? "OK" : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
console.log("[–°–µ—Ä–≤–µ—Ä] SerpAPI Key:", process.env.SERPAPI_KEY ? "OK" : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if (!process.env.SERPAPI_KEY) {
  console.error("[–°–µ—Ä–≤–µ—Ä] SerpAPI Key –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
  process.exit(1);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
const app = express();
const server = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
  origin: 'https://chathelp-y22r.onrender.com',
  methods: ['GET', 'POST']
}));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
const io = new Server(server, {
  cors: {
    origin: 'https://chathelp-y22r.onrender.com',
    methods: ['GET', 'POST']
  }
});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Multer
const upload = multer({
  dest: 'uploads/',
  fileFilter: (req, file, cb) => {
    if (/^audio\/(wav|x-wav|webm)$/.test(file.mimetype)) {
      console.log(`[–ê—É–¥–∏–æ] –ü—Ä–∏–Ω—è—Ç —Ñ–æ—Ä–º–∞—Ç: ${file.mimetype}`);
      cb(null, true);
    } else {
      console.warn(`[–ê—É–¥–∏–æ] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${file.mimetype}`);
      cb(new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ WAV/WEBM —Ñ–∞–π–ª—ã'), false);
    }
  },
  limits: {
    fileSize: 25 * 1024 * 1024, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 25 MB
    files: 1
  }
});

// Middleware
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json({ limit: '25mb' }));

// –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤
app.use('/audio', express.static(path.join(__dirname, 'audio')));
app.use('/images', express.static(path.join(__dirname, 'images'))); 

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ audio
const audioDir = path.join(__dirname, 'audio');
if (!fs.existsSync(audioDir)) {
  fs.mkdirSync(audioDir);
  console.log(`[–°–µ—Ä–≤–µ—Ä] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${audioDir}`);
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π
const userSessions = new Map();
const activeSessions = new Set();
const audioQueue = new Map();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
app.post('/process-audio', upload.single('audio'), async (req, res) => {
  try {
    if (!req.file) {
      console.warn('[–ê—É–¥–∏–æ] –§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω');
      return res.status(400).json({ error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const audioPath = req.file.path;
    console.log(`[–ê—É–¥–∏–æ] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${audioPath} (${req.file.size} –±–∞–π—Ç)`);

    if (req.file.size === 0) {
      console.error('[–ê—É–¥–∏–æ] –§–∞–π–ª –ø—É—Å—Ç–æ–π');
      return res.status(400).json({ error: '–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π' });
    }

    // –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    const command = `python3 "${path.join(__dirname, 'transcribe.py')}" "${audioPath}"`;
    
    exec(command, { encoding: 'utf-8' }, (error, stdout, stderr) => {
      // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      fs.unlinkSync(audioPath);

      if (error) {
        console.error(`[Python] –û—à–∏–±–∫–∞: ${stderr}`);
        return res.status(500).json({ 
          error: '–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏',
          details: stderr
        });
      }

      if (!stdout?.trim()) {
        console.warn('[Python] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
        return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å' });
      }

      console.log('[Python] –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è');
      res.json({ transcription: stdout.trim() });
    });

  } catch (error) {
    console.error(`[–°–µ—Ä–≤–µ—Ä] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleTextQuery(message, socket) {
  try {
    const session = userSessions.get(socket.id) || [];
    const messages = [...session, { role: 'user', content: message }];

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å gpt-3.5-turbo
      messages: messages,
      temperature: 0.7,
      max_tokens: 500
    });

    const botResponse = response.choices[0].message.content;
    userSessions.set(socket.id, [...messages, { role: 'assistant', content: botResponse }]);
    
    socket.emit('message', botResponse);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const audioPath = path.join(audioDir, `${socket.id}_response.mp3`);
    const gtts = new gTTS(botResponse, 'ru');
    gtts.save(audioPath, function (err, result) {
      if (err) {
        console.error(`[gTTS] –û—à–∏–±–∫–∞: ${err.message}`);
        socket.emit('message', '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
      } else {
        console.log(`[gTTS] –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${audioPath}`);
        if (!audioQueue.has(socket.id)) {
          audioQueue.set(socket.id, []);
        }
        audioQueue.get(socket.id).push(audioPath);
        playNextAudio(socket);
      }
    });
  } catch (error) {
    console.error(`[GPT] –û—à–∏–±–∫–∞: ${error.message}`);
    socket.emit('message', '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
  }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞—É–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥–∏
function playNextAudio(socket) {
  const queue = audioQueue.get(socket.id);
  if (queue && queue.length > 0) {
    const audioPath = queue.shift();
    console.log(`[Audio] –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ: ${audioPath}`);
    socket.emit('audio', `/audio/${path.basename(audioPath)}`);
    fs.unlink(audioPath, (err) => {
      if (err) console.error(`[–û—á–∏—Å—Ç–∫–∞] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${err.message}`);
    });
  }
}

// WebSocket –ª–æ–≥–∏–∫–∞
io.on('connection', (socket) => {
  console.log(`[WebSocket] –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
  userSessions.set(socket.id, []);
  activeSessions.add(socket.id);

  socket.on('message', async (message) => {
    try {
      console.log(`[WebSocket] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${socket.id}: ${message}`);
      
      if (/–∂–µ—Å—Ç|–≤–∏–¥–µ–æ|—Ä–∞—Å–ø–æ–∑–Ω–∞–π/i.test(message)) {
        return socket.emit('message', 'üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∂–µ—Å—Ç–æ–≤');
      }

      await handleTextQuery(message, socket);
    } catch (error) {
      console.error(`[WebSocket] –û—à–∏–±–∫–∞: ${error.message}`);
      socket.emit('message', '‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  });

  socket.on('disconnect', () => {
    console.log(`[WebSocket] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id}`);
    userSessions.delete(socket.id);
    activeSessions.delete(socket.id);
    audioQueue.delete(socket.id);
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`[–°–µ—Ä–≤–µ—Ä] –ó–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log('[–°–µ—Ä–≤–µ—Ä] –†–µ–∂–∏–º:', process.env.NODE_ENV || 'development');
});